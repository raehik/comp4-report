#!/usr/bin/env bash
#
# Generate LaTeX code listings for LaTeX to process.
#

# initial (usage, log etc.) {{{

STDOUT="1"
STDERR="2"

FILENAME="${0##*/}"

LOGGER="echo"
LOG_PRE="$FILENAME"

# Print usage and exit depending on given exit code.
usage() {
    exit_code=$1
    # if argument was non-zero, pipe it to STDERR instead
    if [[ $exit_code == 0 ]]; then
        pipe=$STDOUT
    else
        pipe=$STDERR
    fi
    cat >&$pipe <<EOF
Usage: $FILENAME [options]
%{2||Description of the program's function (identical if you'd like).}%

  Options:
    -v          be verbose
    -h          display this help message

Notes about default options/arguments, things you might wanna watch out
for, etc.
EOF
    exit $exit_code
}

# If verbose, log an event.
log() {
    # if not verbose (i.e. $VERBOSE is empty), do nothing
    test -z $VERBOSE && return
    $LOGGER "$LOG_PRE: $1"
}

# Log an error. If given a 2nd argument, exit with it as the exit code.
error() {
    $LOGGER "$LOG_PRE: error: $1" >&$STDERR
    if [[ $2 ]]; then
        exit $2
    fi
}

while getopts ":vh" opt; do
    case $opt in
        h) usage 0 ;;
        v) VERBOSE=1 ;;
        *) error "-$OPTARG is not a valid option" ; usage 1 ;;
    esac
done

shift $((OPTIND-1))

# }}}



outfile="generated-code-listings.tex"
src_lang="cpp"

root_path="../../comp4-project"
src_path="src"
inc_path="include"

nl=$'\n'

gen_append() {
    echo "$1" >> "$outfile"
}

process_files() {
    while IFS=$'\n' read srcfile; do
        gen_append "\\subsection{\\texttt{${srcfile##*/}}}"
        gen_append "\\begin{minted}[breaklines]{$src_lang}"
        gen_append "$(cat "$srcfile")"
        gen_append "\\end{minted}$nl"
    done <<< "$1"
}

# cd to directory of script (b/c we use relative paths)
cd "$(dirname "$0")"

if [[ -f "$outfile" ]]; then
    log "removing old file"
    rm "$outfile"
fi



gen_append "\\section{Source files}$nl"
process_files "$(find "$root_path/$src_path" -type f | sort)"

gen_append "\\section{Header files}$nl"
process_files "$(find "$root_path/$inc_path" -type f | sort)"
