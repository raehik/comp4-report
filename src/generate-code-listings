#!/usr/bin/env bash
#
# Generate LaTeX code listings for LaTeX to process.
#

# initial (usage, log etc.) {{{

STDOUT="1"
STDERR="2"

FILENAME="${0##*/}"

LOGGER="echo"
LOG_PRE="$FILENAME"

# Print usage and exit depending on given exit code.
usage() {
    exit_code=$1
    # if argument was non-zero, pipe it to STDERR instead
    if [[ $exit_code == 0 ]]; then
        pipe=$STDOUT
    else
        pipe=$STDERR
    fi
    cat >&$pipe <<EOF
Usage: $FILENAME [options]
%{2||Description of the program's function (identical if you'd like).}%

  Options:
    -v          be verbose
    -h          display this help message

Notes about default options/arguments, things you might wanna watch out
for, etc.
EOF
    exit $exit_code
}

# If verbose, log an event.
log() {
    # if not verbose (i.e. $VERBOSE is empty), do nothing
    test -z $VERBOSE && return
    $LOGGER "$LOG_PRE: $1"
}

# Log an error. If given a 2nd argument, exit with it as the exit code.
error() {
    $LOGGER "$LOG_PRE: error: $1" >&$STDERR
    if [[ $2 ]]; then
        exit $2
    fi
}

while getopts ":vh" opt; do
    case $opt in
        h) usage 0 ;;
        v) VERBOSE=1 ;;
        *) error "-$OPTARG is not a valid option" ; usage 1 ;;
    esac
done

shift $((OPTIND-1))

# }}}

outfile="generated-code-listings.tex"
src_lang="cpp"
src_ext="cpp"
inc_ext="h"

root_path="$HOME/school/cs/comp4/comp4-project/digital-organiser"
src_path="src"
inc_path="include"

nl=$'\n'

minted_opts="breaklines,linenos,fontsize=\\normalsize"

gen_append() {
    echo "$1" >> "$outfile"
}

process_files() {
    while IFS=$'\n' read srcfile; do
        if [[ -z "$srcfile" ]]; then
            log "srcfile was empty, there were probably no files found"
            continue
        fi
        add_code_as_file "$srcfile"
    done <<< "$1"
}

add_code_as_file() {
    # This inserts an \inputminted command for the file passed. That means so
    # long as you don't add or remove any files (i.e. only change them), you can
    # keep using the same generated file without re-generating it.
    gen_append "\\subsection{\\texttt{${1##*/}}}"
    gen_append "\\inputminted[$minted_opts]{$src_lang}{$(realpath "$1")}$nl"
}

add_code_as_cat() {
    # This inserts the full contents of the file passed at the time of
    # generation into the generated file. A bit more trustworthy, but generates
    # a much larger file and means the script has to be run again for every
    # change made to the codebase.
    gen_append "\\subsection{\\texttt{${1##*/}}}"
    gen_append "\\begin{minted}[$minted_opts]{$src_lang}"
    gen_append "$(cat "$1")"
    gen_append "\\end{minted}$nl"
}

find_in_root_at() {
    find "$root_path/$1" -type f -name "*.$src_ext" -o -name "*.$inc_ext" | sort
}

# cd to directory of script (b/c we use relative paths)
cd "$(dirname "$0")"

if [[ -f "$outfile" ]]; then
    log "removing old file"
    rm "$outfile"
fi

gen_append "\\section{Source files}$nl"
process_files "$(find_in_root_at $src_path)"

# new page for header section
gen_append "\\clearpage$nl"

gen_append "\\section{Header files}$nl"
process_files "$(find_in_root_at $inc_path)"
